OPEN TUID Genre (
    id,
    main name char(50) not null,
    main imageUrl char(500),
    search (name),
);

MAP PointProductGenre(
    key genre ID Genre not null,
    key pointProduct ID PointProductLib not null,
);

-- 可兑换产品库
TUID PointProductLib (
    id,
    main description char(1000),
    main descriptionC char(1000),
    main grade char(1000), 
    main point int,                                  --所需积分
    startDate date,                             --生效时间
    endDate date,                               --过期时间
    main imageUrl char(500),                         --产品图片
    isValid tinyint not null default 1,
    search (description, descriptionC),
) ON SAVE {
    var source char(8), sourceId char(50);
    set source = type, sourceId = sourceId from PointProductSource where pointProduct = id; 
    if (not source is null) {
        bus pointBus.pointProductBusOut set pack = id, source = source, sourceId = sourceId,
            point = point, startDate = unix_timestamp(startDate), endDate = unix_timestamp(endDate), imageUrl = imageUrl;
    }
};

-- 积分兑换产品和 其来源的映射关系（1.来自营销产品库；2.来自第三方等）
MAP PointProductSource (
    key pointProduct ID PointProductLib,
    key sourceId char(50),
    type char(8) not null,  -- selfsales, jd.com
) ON SAVE {
    var point int, startDate date, endDate date, imageUrl char(500);
    set point = point, startDate = startDate, endDate = endDate, imageUrl = imageUrl
    from    PointProductLib
    where   id = pointProduct; 
    bus pointBus.pointProductBusOut set pack = pointProduct, source = type, sourceId = sourceId,
        point = point, startDate = unix_timestamp(startDate), endDate = unix_timestamp(endDate), imageUrl = imageUrl;
};

-- 
MAP PointProductDetail (
    key pointProduct ID PointProductLib,
    content text,
);


-- 品牌最低折扣表（低于此表中设置折扣的，不给积分）
MAP BrandMinDiscount (
    key brand ID Brand,
    discount dec(12, 2),
    isValid int,
);

-- 可兑换产品表(作废，被PointProductLib替代)
MAP PointProduct (
    key product ID ProductX not null,           --产品编号
    key pack OF product.PackX not null,         --包装编号
    point int,                                  --所需积分
    startDate date,                             --生效时间
    endDate date,                               --过期时间
    imageUrl char(500),                         --产品图片
    index idx_date,
);

-- 积分BOOK(针对webuser)
BOOK PointBook (
    key webUser ID [$user],                 -- 是webuser
    key pointYear int not null,             -- 积分所在年度
    point int not null default 0,           -- 总有效积分
    usedPoint int default 0,                -- 消耗的积分
    totalPoint int not null default 0,      -- 总积分
    tempPoint int not null default 0,       -- 在tonva订单系统产生的临时积分（当此积分同步到内部系统，再从内部系统同步回来时，会并入totalPoint内，此积分清零)
    tempUsedPoint int not null default 0,   -- 在tonva系统消耗的临时积分（当此积分同步到内部系统，再从内部系统同步回来时，会并入usedPoint内，此积分清零), 2020-10-16, ligsh, 不再使用此字段
    tempSignInPoint int not null default 0  -- 签到产生的积分，该积分和tempPoint的区别是，它是有效积分，该积分也需要同步到内部系统，从内部系统同步回来时，并入到totalPoint和point中，此积分清零, 2020-10-16, ligsh, 不再使用此字段
);

-- 积分明细（备份，当审核通过时吧这个积分记录复制到 PointBook ）
BOOK PointBookByCustomer (
    key customer ID Customer,   -- 客户编号，不是webuser
    key pointYear int not null,             -- 积分所在年度
    point int not null default 0,           -- 总有效积分
    usedPoint int default 0,                -- 消耗的积分
    totalPoint int not null default 0      -- 总积分
);

-- 积分变化表(针对webuser)
HISTORY PointHistory (
    date,                       --生成时间
    pointYear int,              --积分年度
    point int,                  --积分数(100 or -100)
    source int,                 --积分来源: 1：使用积分券下单积分；2：签到积分；3:积分兑换(积分为负); 4:兑换取消；
    comments char(1000) ,       --备注
    webUser ID [$user],         --客户
    sheet,                      --单据
    type,                       --不同的sheet类型
    row,                        --子表的第几行
);

-- 积分变化表(针对customer)
HISTORY PointHistoryByCustomer (
    date,                       --生成时间
    pointYear int,              --积分年度
    point int,                  --积分数(100 or -100)
    source int,                 --积分来源: 1：使用积分券下单积分；2：签到积分；3:积分兑换(积分为负); 4:兑换取消; 5:订单积分;6:有效积分变动;
    comments char(1000) ,       --备注
    customer ID Customer,       --客户
    sheet,                      --单据
    type,                       --不同的sheet类型
    row,                        --子表的第几行
);

-- 积分变化表(针对order订单明细),2021年8月27日，D72
HISTORY PointHistoryByOrderDetail (
    date,                                   --生成时间
    orderDetailId ID orderDetail,           --订单明细ID
    pointYear int,                          --积分年度
    point int,                              --积分数(100 or -100)
    type int,                               --1：积分，2：有效积分
    comments char(1000) ,                   --备注
);

-- 积分订单明细表,2021年8月27日，D72
BOOK PointBookByOrderDetail (
    key orderDetailId ID orderDetail,       -- 订单明细ID
    amountOfMoney  dec(12, 2),              -- 金额
    point int not null default 0,           -- 有效积分
    totalPoint int not null default 0,      -- 积分
    multiple int not null default 1,        -- 积分倍数
);


-- 当前客户积分分布表（在某个积分段有多少人）
BOOK PointDistributionBook (
    key pointStart int not null,
    numbers int not null, 
);

--兑换单表
SHEET PointExchangeSheet ver 0.1 (
    customer ID Customer,                   --客户编号
    webUser ID WebUser,                     --用户编号
    ARR exchangeItems (
        product ID PointProductLib not null,       --产品编号
        point int,                          --单个积分值
        quantity int not null,              --数量
        subAmount int not null,             --小计
    ),
    amount int not null,                    --总计
    shippingContact ID Contact,             --收货地址
)
Action submit {
    var leftAmount bigint;
    set leftAmount = amount;

    foreach (var mPoint int, pointYear int of
        select  (p.point - p.usedPoint) as mPoint, p.pointYear
        from    PointBook as p
        where   p.webUser = webUser and p.pointYear > YEAR(NOW()) - 3
                and (p.point - p.usedPoint) > 0
        order by p.pointYear
    ) {
        if (leftAmount > 0){
            var p int;
            if(mPoint >= leftAmount) {
                set p = leftAmount;
            }else{
                set p = mPoint;
            }

            book PointBook at (webUser, pointYear) set usedPoint += p;
            history PointHistory
                set webUser = webUser, pointYear = pointYear, point = (0-p), comments=$sheet_no, source = 3;
             
            --添加客户积分兑换
            if (customer > 0) {
                book PointBookByCustomer at (customer, pointYear) set usedPoint += p;
                history PointHistoryByCustomer
                    set customer = customer, pointYear = pointYear, point = (0-p), comments=$sheet_no, source = 3;
            }

            set leftAmount = leftAmount - p;
            if(leftAmount <= 0){
                break;
            }
        }
    }

    if (customer > 0) {
        bus pointBus.pointExchangeSheet set id = $id, no = $sheet_no, customer = customer,
            shippingContact = shippingContact, amount = amount;
        var source char(8), sourceId int;
        foreach exchangeItems {
            set source = type, sourceId = sourceId from PointProductSource where pointProduct = product;
            bus pointBus.pointExchangeSheet into exchangeItems add product = product, source = source, sourceId = sourceId,
                quantity = quantity, point = point, subAmount = subAmount;
        }
        STATE TO Shipping;
    } else {
        STATE TO Matching;
    }
}
STATE Matching {
    ACTION Pass
    BUS webUserBus.getCuByWu as q into tb {
        set q.webUser = webUser;
    } {
        if(customer is null) {
            var customerid int;
            foreach tb {
                set customerid = customer;
            }

            bus pointBus.pointExchangeSheet set id = $id, no = $sheet_no, customer = customerid,
                shippingContact = shippingContact, amount = amount;
            var source char(8), sourceId int;
            foreach exchangeItems {
                set source = type, sourceId = sourceId from PointProductSource where pointProduct = product;
                bus pointBus.pointExchangeSheet into exchangeItems add product = product, source = source, sourceId = sourceId,
                    quantity = quantity, point = point, subAmount = subAmount;
            }
        STATE TO Shipping;
        }
    }
}
STATE Shipping {
    ACTION Cancel {
        foreach(var pointYear int, point int of 
            select p.pointYear, p.point
            from PointHistory as p
            where p.webUser = webUser and p.source = 3 and p.comments = $sheet_no
        ){
            book PointBook at (webUser, pointYear) set usedPoint -= point * -1;
            history PointHistory
                set webUser = webUser, pointYear = pointYear, point = point * -1, comments=$sheet_no, source = 4;

            --添加客户积分兑换取消
            if (customer > 0) {
                book PointBookByCustomer at (customer, pointYear) set usedPoint -= point * -1;
                history PointHistoryByCustomer
                    set customer = customer, pointYear = pointYear, point = point * -1, comments=$sheet_no, source = 4;            
            }
        } 
        STATE TO CANCELED;
    }
}
STATE CANCELED {

};

/*
 * 有关产品的浏览量/兑换量统计
*/
BOOK PointProductHotStat (
    key pointProduct ID PointProductLib not null,
    visits int not null default 0,
    exchanges int not null default 0,
);

HISTORY PointProductVisitHistory (
    date,
    pointProduct ID PointProductLib not null,
    webUser ID [$user],
);

-- 积分兑换产品变动历史记录表
HISTORY PointProductLibHistory (
    date,
    pointProduct ID PointProductLib not null,
    startDate date,
    endDate date,
    reason char(30),
    createTime date,
);

/*
-- 解决原始产品已下架或价格过期，但仍显示在积分商城的问题：pointshop中创建作业调度每日检查未下架产品所对应的原始产品是否有效，无效者设置isvalid=0，且记录历史
select	*
from	pointshop.tv_pointproductlib a
		inner join pointshop.tv_pointproductsource b on a.id = b.pointproduct and b.`type` = 'self'
		inner join product.tv_productx_packx c on b.sourceid = c.`id`
		inner join product.tv_pricex d on c.owner = d.product and c.id = d.pack and d.$unit = 24 and d.salesregion = 1
			and d.expiredate < now()
where	a.enddate > now();

select	*
from	pointshop.tv_pointproductlib a
		inner join pointshop.tv_pointproductsource b on a.id = b.pointproduct and b.`type` = 'self'
		inner join product.tv_productx_packx c on b.sourceid = c.`id`
		inner join product.tv_pricex d on c.owner = d.product and c.id = d.pack and d.$unit = 24 and d.salesregion = 1
			and d.discountinued = 1
where	a.enddate > now();
*/


MAP OrderBack (
    key orderItemId char(50),
    orderId char(50),

    customer ID Customer,

    brand bigint,
    product bigint,
    pack bigint,
    quantity int,
    price dec(12, 2),
    currency ID Currency,
    retail dec(12, 2),
    retailCurrency ID Currency,
    mark char(10),
    createDate datetime,
    
    totalPoint int not null default 0
);

-- 当遇到先交换付款再交换订单时，先将不存在orderback的payment保存在pending中，后续再定时将pending中的数据导入到payment中重新执行
PENDING SOrderPaymentPending ver 0.1 (
    id,
    orderId   char(50),
    orderItemId  char(50),  
    amount dec(12, 2),
    currency  ID Currency,
    action bigint,
    createDate datetime,
    date,
);