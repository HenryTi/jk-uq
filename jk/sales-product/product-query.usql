QUERY GetProductByOrigin(origin char(50), salesRegion ID SalesRegion)
returns ret(
    id ID ProductX
) {
    into ret select p.id
    from ProductX as p
         join Brand as b on p.brand = b.id
    where p.origin = origin and b.no in ('A01', 'A10'); 
};

/**
 * 根据产品编号/包装规格查询产品，在客户手动输入或提交excel表格下单的场景下使用
*/
QUERY GetProductPackByOrigin(origin char(50), salesRegion ID SalesRegion)
returns ret(
    product ID ProductX,
    pack ID ProductX.PackX,
) {
    into ret select p.id as product, pk.id as pack 
    from ProductCache as pc
         join ProductX as p on pc.product = p.id
         join ProductX.PackX as pk on pk.owner = p.id
    where p.origin = origin 
          and pc.salesRegion = salesRegion;
};

QUERY GetAvailableProductById(product ID ProductX, salesRegion ID SalesRegion)
returns ret (
    id ID ProductX,
    brand ID Brand,
    origin char(50),
    description char(1000),
    descriptionC char(1000),
    imageUrl char(200),
    no char(50),
    isValid tinyint
) {
    into ret select p.id, p.brand, p.origin, p.description, p.descriptionC, p.imageUrl, p.no, p.isValid
    from ProductCache as pc
         join ProductX as p on pc.product = p.id
    where pc.product = product and pc.salesRegion = salesRegion;
};

QUERY GetFutureDeliveryTime(product ID ProductX, salesRegion ID SalesRegion)
returns ret(
    minValue int,
    maxValue int,
    unit char(10),
    deliveryTimeDescription char(100)
) {
    into ret select bdt.minValue, bdt.maxValue, bdt.unit, bdt.deliveryTimeDescription
    from ProductX as p
        join Brand as b on p.brand = b.id
        join BrandDeliveryTime as bdt on bdt.brand = b.id
    where p.id = product
        and bdt.salesRegion = salesRegion;
};

QUERY SearchProduct (keyWord char(100), salesRegion ID salesRegion)
PAGE (
    seq bigint asc,
    id ID ProductX,
    no char(50),
    brand ID Brand,
    origin char(50),
    description char(1000),
    descriptionC char(1000),
    imageUrl char(200),
    chemical ID Chemical,
    CAS char(20),
    purity char(80),
    molecularFomula char(200),
    molecularWeight char(30)
) {
    var key2 char(100);
    set key2 = concat(keyWord, '*');

    /-mysql
    DROP TEMPORARY TABLE IF EXISTS `_$page_product`;
    CREATE TEMPORARY TABLE `_$page_product` (`id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, `product` BIGINT NOT NULL) ENGINE=MyISAM;
    insert  into `_$page_product`( product )
    SELECT p.`id` AS `id`
    FROM (
        select  p1.`$unit`, p1.`id` AS `id`, pc.level, pc.hasstock, 1 as score, 1 as sourcerank
        from    `tv_productcache` as pc
                inner join `tv_productx` as p1 on p1.`$unit` = pc.`$unit` and p1.id = pc.product
        where   p1.`$unit` = `_$unit` and p1.origin = `_keyWord` and pc.salesRegion = `_salesRegion`
        union
        select  p1.`$unit`, p1.`id` AS `id`, pc.level, pc.hasstock, 1 as score, 1 as sourcerank
        from    `tv_productcache` as pc
                inner join `tv_productx` as p1 on p1.`$unit` = pc.`$unit` and p1.id = pc.product
                inner JOIN `tv_productchemical` AS pc1 ON p1.`id`=pc1.`product` and p1.`$unit` = pc1.`$unit`
        where   pc1.`$unit` = `_$unit` and pc1.cas = `_keyWord` and pc.salesRegion = `_salesRegion`
        union
        select  p4.`$unit`, p4.`id` AS `id`, p4.level, p4.hasstock, score, 4 as sourcerank
        from    (
                select  p1.`$unit`, p1.`id` AS `id`, pc.level, pc.hasstock, match (p1.`description`) against (`_key2_1` in boolean mode ) as score
                from    `tv_productcache` as pc
                        inner join `tv_productx` as p1 on p1.`$unit` = pc.`$unit` and p1.id = pc.product
                where   match (p1.`description`) against (`_key2_1` in boolean mode ) and pc.salesRegion = `_salesRegion`
                        and length(`_keyWord`) = char_length(`_keyWord`) -- 限制非英文不查询英文字段
                order by match (p1.`description`) against (`_key2_1` in boolean mode ) desc
                limit 499
                ) p4
        union
        select  p5.`$unit`, p5.`id` AS `id`, p5.level, p5.hasstock, score, 5 as sourcerank
        from    (
                select  p1.`$unit`, p1.`id` AS `id`, pc.level, pc.hasstock, match (p1.`descriptionc`) against (`_keyWord`) as score
                from    `tv_productcache` as pc
                        inner join `tv_productx` as p1 on p1.`$unit` = pc.`$unit` and p1.id = pc.product
                where   match (p1.`descriptionc`) against (`_keyWord`) and pc.salesRegion = `_salesRegion`
                order by match (p1.`descriptionc`) against (`_keyWord`) desc
                limit 499
                ) p5
        ) AS p
    WHERE 1=1 AND p.`$unit`=`_$unit`
    order by p.sourcerank, p.score desc, p.hasstock desc, p.level desc
    limit 499;

    INSERT  INTO `_$page` (`id`, `no`,`brand`,`origin`,`description`,`descriptionc`,`imageurl`,`chemical`,`cas`,`purity`,`molecularfomula`,`molecularweight`, `seq`)
    SELECT  p.`id`,p.`no` AS `no`,p.`brand` AS `brand`,p.`origin` AS `origin`,p.`description` AS `description`
            ,p.`descriptionc` AS `descriptionc`,p.`imageurl` AS `imageurl`,pc.`chemical` AS `chemical`,pc.`cas` AS `cas`,pc.`purity` AS `purity`,pc.`molecularfomula` AS `molecularfomula`,pc.`molecularweight` AS `molecularweight`,
            pp.`id` as `seq`
    from    `_$page_product` as pp
            inner join tv_productx as p on p.id = pp.product
            LEFT JOIN `tv_brand` AS b ON p.`brand`=b.`id` AND b.`$unit`=`_$unit`
            LEFT JOIN `tv_productchemical` AS pc ON p.`id`=pc.`product` AND pc.`$unit`=`_$unit`
    WHERE   1=1 AND p.`$unit`=`_$unit` and pp.id > `_$pagestart`
    ORDER   BY pp.id
    LIMIT   `_$pagesize`;
    -/
    -- history ProductSearchHistory set webUser = $user, salesRegion = salesRegion, keyWord = keyWord;
};


/*
use product;

# 如果原来存在该名字的任务计划则先删除
drop event if exists EVT_InitProductCache;

delimiter $$
 # 每天晚上00:10:00
create event EVT_InitProductCache
on schedule every 1 DAY starts timestamp '2019-05-21 00:10:00'
do
begin
    truncate table tv_productcache;

    insert  into tv_productcache(`$unit`, product, salesregion, level, hasStock)
    select  p.`$unit`, p.id, br.salesregion, br.level, 0
    from    tv_productx as p
            inner join tv_brandsalesregion as br on p.`$unit` = br.`$unit` and p.brand = br.brand
    where   p.isvalid = 1
            and br.`level` in ( 1000, 100, 50, 10, -10 )
            and exists(
                select  1
                from    tv_productx_packx as pk
                        inner join tv_pricex as pr on pr.product = pk.owner and pr.pack = pk.id
                where   pr.`$unit` = p.`$unit`
                        and pr.product = p.id
                        and pr.salesregion = br.salesregion
                        and pr.discountinued = 0
                        and pr.expiredate > UTC_TIMESTAMP()
            )
            and not exists(
                select  1 from tv_productlegallyprohibited as plb
                where   plb.`$unit` = p.`$unit` and plb.product = p.id and plb.salesregion = br.salesregion
            );
end  $$
delimiter ;

# 停止
ALTER EVENT EVT_InitProductCache DISABLE;
# 开启
alter event EVT_InitProduct
# 查看状态
select * from mysql.eventCache enable;
*/

-- 根据品牌名称/产品编号/包装规格查询产品及其包装，在和第三方做订单对接时使用
QUERY GetPack(brandName char(20), origin char(50), radiox dec(12, 2), radioy dec(12, 4), unit char(20))
returns ret(
    product ID ProductX,
    pack ID ProductX.PackX,
    jkcat char(50)
) {
    Into ret select p.id as product, pp.id as pack, pp.jkcat as jkcat
    from     Brand as b
             join ProductX as p on b.id = p.brand
             join ProductX.PackX as pp on p.id = pp.owner
    where    b.name = brandName
             and p.origin = origin
             and pp.radiox = radiox
             and pp.radioy = radioy
             and pp.unit = unit;
};

-- 
QUERY GetProductPrices(product ID ProductX, salesRegion ID SalesRegion)
returns ret (
    product ID ProductX,
    pack ID ProductX.PackX,
    salesRegion ID SalesRegion,
    retail dec(12, 2),
    expireDate datetime,
    discountinued tinyint,
    salesLevel ID PackSalesLevel,
) {
    into ret select p.product, p.pack, p.salesRegion, p.retail, p.expireDate, p.discountinued, pk.salesLevel
    from PriceX as p
         join ProductX.PackX as pk on p.product = pk.owner and p.pack = pk.id
    where p.product = product and p.salesRegion = salesRegion;
};