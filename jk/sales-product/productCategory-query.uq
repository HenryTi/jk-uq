
Query GetRootCategories (salesRegion ID SalesRegion, language ID Language)
returns ret(
    productCategory int,
    name char(200),
    total int,
){
    into ret select pc.id as productCategory, pcl.name, ppi.total
    from    ProductCategory as pc
            join ProductCategory.ProductCategoryLanguage as pcl on pcl.owner = pc.id
                and pcl.language = language
            join ProductCategoryInclusion as ppi on ppi.category = pc.id and ppi.salesRegion = salesRegion and ppi.total > 0
    where   pc.parent is null;
};

Query GetRootCategory (salesRegion ID SalesRegion, language ID Language)
returns first(
    productCategory ID ProductCategory,
    name char(200),
    total int
)
returns secend(
    productCategory ID ProductCategory,
    parent ID,
    name char(200),
    total int
)
returns third(
    productCategory ID ProductCategory,
    parent ID,
    name char(200),
    total int
) {
    into first select pc.id as productCategory, pcl.name, ppi.total
    from    ProductCategory as pc
            join ProductCategory.ProductCategoryLanguage as pcl on pcl.owner = pc.id
                and pcl.language = language
            join ProductCategoryInclusion as ppi on ppi.category = pc.id and ppi.salesRegion = salesRegion and ppi.total > 0
    where   pc.parent is null;

    into secend select pc.id as productCategory, pc.parent, pcl.name, ppi.total
    from    ProductCategory as pc
            join ProductCategory.ProductCategoryLanguage as pcl on pcl.owner = pc.id
                and pcl.language = language
            join ProductCategoryInclusion as ppi on ppi.category = pc.id and ppi.salesRegion = salesRegion and ppi.total > 0
            join ProductCategory as pc2 on pc.parent = pc2.id
    where   pc2.parent is null;

    into third select pc.id as productCategory, pc.parent, pcl.name, ppi.total
    from    ProductCategory as pc
            join ProductCategory.ProductCategoryLanguage as pcl on pcl.owner = pc.id
                and pcl.language = language
            join ProductCategoryInclusion as ppi on ppi.category = pc.id and ppi.salesRegion = salesRegion and ppi.total > 0
            join ProductCategory as pc2 on pc.parent = pc2.id
            join ProductCategory as pc1 on pc2.parent = pc1.id
    where   pc1.parent is null;
};

Query GetChildrenCategory (parent ID ProductCategory, salesRegion ID SalesRegion, language ID Language)
returns first(
    productCategory ID ProductCategory,
    parent ID,
    name char(200),
    total int
)
returns secend(
    productCategory ID ProductCategory,
    parent ID,
    name char(200),
    total int
) {
    into first select pc.id as productCategory, pc.parent, pcl.name, ppi.total
    from    ProductCategory as pc
            join ProductCategory.ProductCategoryLanguage as pcl on pcl.owner = pc.id
                and pcl.language = language
            join ProductCategoryInclusion as ppi on ppi.category = pc.id and ppi.salesRegion = salesRegion and ppi.total > 0
    where   pc.parent = parent;

    into secend select pc.id as productCategory, pc.parent, pcl.name, ppi.total
    from    ProductCategory as pc
            join ProductCategory.ProductCategoryLanguage as pcl on pcl.owner = pc.id
                and pcl.language = language
            join ProductCategoryInclusion as ppi on ppi.category = pc.id and ppi.salesRegion = salesRegion and ppi.total > 0
            join ProductCategory as pc2 on pc.parent = pc2.id
    where   pc2.parent = parent;
};

QUERY SearchProductByCategory (productCategory ID ProductCategory, salesRegion ID SalesRegion, language ID Language)
PAGE (
    seq bigint asc,
    id ID ProductX,
    no char(20),
    brand ID Brand,
    origin char(50),
    description char(1000),
    descriptionC char(1000),
    imageUrl char(200),
    chemical ID Chemical,
    CAS char(20),
    purity char(80),
    molecularFomula char(200),
    molecularWeight char(30)
) {
    /-mysql

    DROP TEMPORARY TABLE IF EXISTS `_$page_searchProductByCategory`;
    CREATE TEMPORARY TABLE `_$page_searchProductByCategory` ( `id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, `product` BIGINT NOT NULL) ENGINE=MyISAM;

    insert into `_$page_searchProductByCategory`(`product`)
    select  product
    from    tv_productproductcategorycache
    where   $unit = `_$unit` and salesRegion = `_salesRegion` and category = `_productCategory`
    order by `order`
    /*
    select  ppc.product
    from    `tv_productproductcategory` as ppc
            inner join `tv_productcache` as pca on pca.$unit = ppc.$unit and pca.product = ppc.product
    where   ppc.$unit = `_$unit` and ppc.category = `_productCategory` and pca.salesRegion = `_salesRegion`
    order by pca.hasstock desc, pca.level desc, ppc.product
    */
    limit 1200;

    INSERT  INTO `_$page` (`id`, `no`, `brand`, `origin`, `description`, `descriptionc`, `imageurl`, `chemical`, `cas`
            , `purity`, `molecularfomula`, `molecularweight`, `seq`)
    SELECT  p.`id`, p.`no` AS `no`, p.`brand` AS `brand`, p.`origin` AS `origin`, p.`description` AS `description`
            , p.`descriptionc` AS `descriptionc`, p.`imageurl` AS `imageurl`, pc.`chemical` AS `chemical`, pc.`cas` AS `cas`
            , pc.`purity` AS `purity`, pc.`molecularfomula` AS `molecularfomula`, pc.`molecularweight` AS `molecularweight`
            , pp.`id` as `seq`
    from    `_$page_searchProductByCategory` as pp
            inner join `tv_productx` as p on p.`$unit` = `_$unit` and p.id = pp.product
            left join `tv_brand` as b on p.`$unit` = b.`$unit` and p.brand = b.id
            left join `tv_productchemical` as pc on p.`$unit` = pc.`$unit` and p.id = pc.product
    where   1 = 1 and pp.id > `_$pagestart`
    limit   `_$pagesize`;
    -/
};

ACTION CountProductCategoryInclusion() {
    /-mysql
    begin
    declare categoryId, parentId, subId, n, ng int default 0;
	truncate table tv_productcategoryinclusion;

    update  tv_productcategory set isLeaf = 1 where $unit = _$unit and isLeaf = 0;
    UPDATE  tv_productcategory AS a, tv_productcategory AS b
    SET a.isLeaf = 0
    WHERE   b.$unit = a.$unit AND b.parent = a.id AND a.isLeaf = 1;

	read_loop: LOOP
		select	id, parent into categoryId, parentId
		from	tv_productcategory
		where	isleaf = 1 and id > n
        order by id
		limit 1;

		if categoryId is null then
			leave read_loop;
		end if;

        set n = categoryId;

        insert 	into tv_productcategoryinclusion(`$unit`, category, salesregion, total)
		select 	ppc.`$unit`, ppc.category, p.salesRegion, count(distinct ppc.product) as con
		from   	tv_productproductcategory ppc
                inner join tv_productcache as p on ppc.product = p.product
		where   ppc.`$unit` = `_$unit` and p.`$unit` = `_$unit`
				and ppc.category = categoryId
		group by ppc.`$unit`, ppc.category, p.salesRegion;


        set ng = 5;
        set subId = categoryId;
        while parentId is not null and ng > 0 do
			if exists( select 1 from tv_productcategoryinclusion where category = parentId ) then
            	update	tv_productcategoryinclusion ppi,
						tv_productcategoryinclusion ppi2
                set		ppi.total = ppi.total + ppi2.total
				where	ppi.category = parentId and ppi2.category = categoryId
						and ppi.`$unit` = ppi2.`$unit` and ppi.salesregion = ppi2.salesregion
                        and ppi.`$unit` = `_$unit`;
			else
				insert 	into tv_productcategoryinclusion(`$unit`, category, salesregion, total)
				select	`$unit`, parentId, salesregion, total
				from	tv_productcategoryinclusion ppi
				where	ppi.`$unit` = `_$unit` and ppi.category = subId;
            end if;

            set subId = parentId;
            select	parent into parentId
            from	tv_productcategory
            where	`$unit` = `_$unit` and id = subId;
            set ng = ng - 1;
        end while;

        set categoryId = null;

	end loop;

    truncate table tv_productproductcategorycache;
    insert  into tv_productproductcategorycache(`$unit`, category, salesRegion, `order`, product)
    select  ppc.`$unit`, ppc.category, pca.salesRegion, @rownum := @rownum + 1, ppc.product
    from    `tv_productcategory` as pc
            inner join `tv_productproductcategory` as ppc on ppc.`$unit` = pc.`$unit` and ppc.category = pc.id
            inner join `tv_productcache` as pca on pca.$unit = ppc.$unit and pca.product = ppc.product
            , (select @rownum := 0) r
    where   ppc.$unit = `_$unit` and pc.isleaf = 1
    order by pca.hasstock desc, pca.level desc, pca.product;
    end;
    -/
};