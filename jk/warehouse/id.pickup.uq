ID Pickup (
	id,
	KEY no,
	warehouse ID,
	picker ID,				-- 拣货人
	startTime TIMESTAMP,
	finishTime TIMESTAMP,
	sys(create)
);

ID PickupDetail (
	id,
	main ID Pickup,			-- Pickup id
	biz ID,
	item ID,
    -- storePoint ID,
    shelfBlock ID,
	quantity DEC(12,2),
    lotNumber char(50),
    json text,
	pickDone dec(12, 2) DEFAULT 0, 
	pickState TINYINT DEFAULT 0,			-- 拣货状态：0 未完成，1已完成;
);

-- 正在拣货的拣货单(和I下PendingPickup重复吗？)
IDX DxPicking (
	id,						-- pickup id
);

ID WarehouseN;

IX IxUserWarehouse (
	ix User,
	xi WarehouseN, -- Warehouse,
);

-- 待出库的pending
IX IxPendingOutBound (
    ixx, -- Warehouse,
    ix, -- cutOffMain
    xi, -- deliver detail id,
    item ID,
    quantity dec(18, 4),
    lotNumber char(50),
    json text,
);

-- 出库后待拣货的pending
IX IxPendingPickup (
    ixx, -- Warehouse,
    ix, -- cutOffMain
    xi, -- deliver detail id,
    item ID,
    shelfBlock ID,
    quantity dec(18, 4),
    lotNumber char(50),
    json text,
);

ACT TrySchedule(p INT)
{
	LOG concat('TrySchedule ', p) SUBJECT 'test';
};

ACT TrySchedule1()
{
	LOG concat('TrySchedule1') SUBJECT 'test schedule';
};

ACT Picking (
	pickup ID,
) {
	WITH DxPicking ID=pickup;
	WITH Pickup ID=pickup SET picker=$user, startTime=$date, finishTime=null;
};

ACT PickedSingle(
	pickupDetail ID,
	quantity dec(18, 4)
){
	WITH pickupDetail ID=pickupDetail SET pickDone=quantity, pickState=1;
};

ACT Picked (
	pickup ID,
	ARR detail (
        pickupDetail ID,
		biz ID,	-- 发货单明细id
		quantity DEC(12,2)	-- 实际拣货数
	)
) {
	WITH DxPicking ID=pickup DEL;
	WITH Pickup ID=pickup SET finishTime=$date;
    BUS JkDeliverBus.[pickup-done] SET id = pickup;
	FOR detail {
		-- todo：检查出库数与拣货数不一致的话，生成退货
		-- 拣货完成
		BUS JkDeliverBus.[pickup-done] into detail ADD id = pickupDetail, biz = biz, value = quantity;
	}
};

-- 把当前所有待发货条目，生成发运单和拣货单
ACT OutBound(
	warehouse ID,
	pickupMaxRows INT
)
RETURNS pickups (
	id ID,
	no CHAR(20),			-- 拣货单编号
)
RETURNS delivers (
	id ID,
	no CHAR(20),			-- 发运单编号
) {
	-- 操作权限检查
	IF NOT exists(SELECT ix FROM IxUserWarehouse WHERE ix=$user AND xi=warehouse) {
		RETURN;
	}

	-- 生成拣货单
	IF pickupMaxRows IS NULL {
		SET pickupMaxRows=1000;
	}
	TABLE tblPickup(key orderDetail ID);
	WHILE 1=1 { 
		DELETE FROM tblPickup as a WHERE 1=1;
		INTO tblPickup SELECT a.xi as orderDetail 
				FROM IxPendingOutBound as a
					LEFT JOIN PickupDetail as b ON a.xi=b.id
					LEFT JOIN DxPicking as c ON b.main=c.id
				WHERE a.ix=warehouse
				LIMIT pickupMaxRows;
		IF (select count(*) from tblPickup)=0 {
			BREAK;
		}
		DELETE a 
			FROM IxPendingOutBound as a JOIN tblPickup as b ON a.xi=b.orderDetail
			WHERE a.ix=warehouse;
		VAR pickup ID, pickupNo CHAR(20);
		SET pickupNo=NO(Pickup);
		SET pickup=ID(Pickup new, pickupNo);
		WITH Pickup as a ID=pickup SET a.warehouse=warehouse;
		WITH DxPicking as a ID=pickup;
		FOR (VAR orderDetail ID
			OF SELECT a.orderDetail FROM tblPickup as a)
		{
			WITH PickupDetail ID=orderDetail SET main=pickup;
		}
		WITH DxPicking ID=pickup;
		INTO pickups SELECT pickup as id, pickupNo as no;
	}
};


-- 把当前所有待发货条目，进行出库（下面的autoPick是将出库结果生成拣货单）
-- 这个里面还缺少“出库”的记账操作，正好暂时不做
ACT AutoOutBound ver 0.1 (
    aWarehouse ID,
    cutOffMain ID,
)
{
	WHILE 1=1 {
		VAR warehouse ID, biz ID, item ID, quantity dec(18, 4), lotNumber char(50), json text;
		SET warehouse=NULL;
		SET warehouse = a.ix, biz = a.xi, item = a.item
            , quantity = a.quantity, lotNumber = a.lotNumber, json = a.json
			FROM IxPendingOutBound as a
            where a.ixx = aWarehouse and a.ix = cutOffMain
			ORDER BY a.ix, a.xi
			LIMIT 1;
		IF warehouse IS NULL {
			BREAK;
		}
		-- DELETE a FROM IxPendingOutbound as a WHERE a.ix=warehouse AND a.xi=orderDetail;
		-- 另外一种删除的语法
		WITH IxPendingOutBound IXX = warehouse ix = cutOffMain xi = biz DEL;

        /*
        TODO: 这儿要添加出库的逻辑，出库后得到货架号及其数量，写入pickupdetail
        */
        WITH IxPendingPickup ixx = warehouse ix = cutOffMain xi = biz
        set item = item, shelfBlock = null, quantity = quantity, lotNumber = lotNumber, json = json;
	}
};

-- 将出库结果生成拣货单
ACT AutoPick (
    aWarehouse ID,
    cutOffMain ID,
) {
	-- 生成拣货单
	VAR pickupMaxRows INT = 100;
	TABLE tblWarehousePickup(key warehouse ID, key cutOffMain ID, pickup ID, rows INT);
    WHILE 1 = 1 {
        VAR warehouse ID, biz ID, item ID, shelfBlock ID, quantity dec(18, 4), lotNumber char(50), json text;
        SET warehouse = NULL;
        SET warehouse = a.ixx, biz = a.xi, item = a.item
            , shelfBlock = a.shelfBlock, quantity = a.quantity, lotNumber = a.lotNumber, json = a.json
            FROM IxPendingPickup as a
            where a.ixx = aWarehouse and a.ix = cutOffMain
            ORDER BY a.ixx, a.xi
            LIMIT 1;
        IF warehouse IS NULL {
            BREAK;
        }
        DELETE a FROM IxPendingPickup as a WHERE a.ixx = warehouse AND a.xi = biz 
        AND a.item = item and a.shelfBlock = shelfBlock;

        VAR pickup ID, pickupNo CHAR(20), rows INT;
        SET pickup=NULL;
        SET pickup=a.pickup, rows=a.rows FROM tblWarehousePickup as a 
        WHERE a.warehouse=warehouse and a.cutOffMain = cutOffMain;
        IF rows>pickupMaxRows {
            SET pickup=NULL;
            DELETE a FROM tblWarehousePickup as a WHERE a.warehouse = warehouse and a.cutOffMain = cutOffMain;
        }
        IF pickup IS NULL {
            SET pickupNo=NO(Pickup);
            SET pickup=ID(Pickup new, pickupNo);
            WITH Pickup as a ID=pickup SET a.warehouse=warehouse;
            WITH DxPicking as a ID=pickup;
            SET rows=1;
            INTO tblWarehousePickup SELECT warehouse, cutOffMain, pickup, rows;
        }else {
            SET rows = rows + 1;
            INTO tblWarehousePickup SELECT warehouse, cutOffMain, pickup, rows;
        }

        VAR pickupDetail ID;
        set pickupDetail = ID(PickupDetail new);
        WITH PickupDetail as a ID=pickupDetail
            SET a.main=pickup, a.biz = biz, a.item = item
            , a.shelfBlock = shelfBlock, a.quantity = quantity, a.lotNumber = lotNumber, a.json = json;
    }
};

QUERY WarehousePickups(
	-- warehouse ID,
)
RETURNS ret (
	warehouse ID,
	pickup ID,
	no CHAR(20),
	create TIMESTAMP,
	picker ID,
) {
	INTO ret SELECT b.warehouse, b.id as pickup, b.no
		, b.[$create] as create
		, b.picker
		FROM IxUserWarehouse as a
			JOIN Pickup as b ON a.xi=b.warehouse
			JOIN DxPicking as c ON c.id=b.id
		WHERE a.ix=$user;
};

QUERY GetPickup(
	pickup ID,
)
RETURNS main (
	id ID,
	no CHAR(20),
	warehouse ID,
	picker ID,
	startTime TIMESTAMP,
	finishTime TIMESTAMP
)
RETURNS detail (
	id ID,
	main ID,
	biz ID,
	item ID,
	shelfBlock ID,
	shouldQuantity DEC(12,2),
	pickdone DEC(12,2),
	pickstate TINYINT,
	lotNumber char(50),
    json text
) {
	INTO main SELECT a.id, a.no
		, a.warehouse, a.picker, a.startTime, a.finishTime
		-- , a.[$create], a.[$owner]
		FROM Pickup as a WHERE a.id=pickup;
	INTO detail SELECT a.id,
		a.main,			-- Pickup id
        a.biz,
		a.item,
        a.shelfBlock,
		a.quantity as shouldQuantity, a.pickdone, a.pickstate, a.lotNumber, a.json
		FROM PickupDetail as a 
		WHERE a.main=pickup;
};