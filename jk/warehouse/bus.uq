BUS JkOrderBus ver 0.9 from 百灵威系统工程部/[jk-order]
    ACCEPT order {
        VAR mainId ID;
        SET mainId = id;
        WITH OrderMain as a ID=id SET a.no=no, a.customerAccount = customerAccount, a.currency = currency;
        FOR detail {
            WITH OrderDetail as a 
                ID = id
                SET a.main=mainId
                    , a.item=item, a.product=product
                    , a.quantity=quantity, a.amount=amount, a.price=price;
        }
    }
    -- 这儿要接收deliver-pickup bus，即要求出库的bus，接收后，写入pending，开始出库，记账(shelfBlockInventory/ShelfBlockLotInventory及历史)
    -- 形成拣货单。 
    -- 替代方案是从老系统接收ShelfInOutBoundHistory bus，接收后，写入pending（暂存发货单号），不进行出库操作，直接记账
    -- 还需要一个 截单 bus，用来通知warehouse，该截单中的出库记录可以形成拣货单了（拣货单中要有对应的deliverDetail，需要从上面的pending中获取）
    ACCEPT pickup {
        FOR detail {
            WITH IxPendingOutBound ixx = warehouse ix = cutOffMain xi = id 
            set orderDetail = orderDetail, quantity = quantity, lotNumber = lotNumber;
        }
        -- SCHEDULE AutoOutBound DELAY 2; -- 2分钟以后执行一次
    };

BUS warehouseBus from [百灵威系统工程部]/warehouse
    ACCEPT productInventory {
        book ProductInventory at (warehouse, product, pack) set quantity = quantity;
    }
    ACCEPT shelfInOutBoundHistory {
        var bQuantity dec(18, 4) = quantity;
        if(inOutType = 0) {
            set bQuantity = bQuantity * -1;
        }
        BOOK ShelfBlockInventory at(shelfBlock) set quantity += bQuantity;
        BOOK ShelfBlockLotInventory at(shelfBlock, product, pack) set lotNumber = lotNumber, quantity += bQuantity;

        history ShelfInOutBoundHistory set shelfBlock = shelfBlock, product = product, pack = pack,
                inOutType = inOutType, quantity = quantity, inOutBoundTime = inOutBoundTime;
    }
    ACCEPT shelfLotUpdateHistory {
        
        -- 数量匹配进行修改，不存在数量不匹配的情况，因为数据来源有判断数量相等的情况出发bus，不相等则增加货架出入记录处理；
        if exists (select 1 from ShelfBlockLotInventory as s where s.shelfBlock = shelfBlock and s.Product = product 
        and s.pack = pack and s.quantity = quantity) {
            set lotNumber = lotNumber
            from ShelfBlockLotInventory as s
            where s.shelfBlock = shelfBlock and s.Product = product and s.pack = pack and s.quantity = quantity;
        }
    };

/*
BUS outBoundTaskHandoverBus from [百灵威系统工程部]/warehouse2
    ACCEPT warehouseOutBoundTaskHandover {

        var rid ID;
        PENDING OutBoundHandoverTask + ( warehouse: warehouse, shelfBlock: shelfBlock, product: product, pack: pack, quantity: quantity,
                consigneeName: consigneeName, consigneeUnitName: consigneeUnitName, consigneeAddress: consigneeAddress, consigneeZipcode: consigneeZipcode, 
                consigneeTelphone: consigneeTelphone, consigneeMobile: consigneeMobile, expressLogistics: expressLogistics, shouldExpressLogistics: shouldExpressLogistics, 
                shouldNotExpressLogistics: shouldNotExpressLogistics, needInsuredWhenDelivery: needInsuredWhenDelivery, unitPrice: unitPrice, currency: currency,
                isNeedDelivery: isNeedDelivery, deliveryData: deliveryData, coaQuantity: coaQuantity, msdsQuantity: msdsQuantity, receiptQuantity: receiptQuantity,
                purchaseBillQuantity: purchaseBillQuantity, showPriceWhenPrintReceipt: showPriceWhenPrintReceipt, isAppointLot: isAppointLot, appointLot: appointLot, 
                deliveryNotes: deliveryNotes, outBoundReason: outBoundReason, relationId: relationId, handovertime: createTime 
                ) to rid;
    }
    ACCEPT warehouseOutBoundResultSync {

        var cId bigint, tId bigint, tWarehouse bigint, tShelfBlock bigint, tProduct bigint, tPack bigint,
        tConsigneeName char(20), tConsigneeUnitName char(50), tConsigneeAddress char(200), tConsigneeZipcode char(20), tConsigneeTelphone char(20), tConsigneeMobile char(20),
        tExpressLogistics char(50), tShouldExpressLogistics char(50), tShouldNotExpressLogistics char(50),
        tNeedInsuredWhenDelivery int, tUnitPrice DEC(12, 2), tCurrency char(10), tIsNeedDelivery int, tDeliveryData char(100), 
        tCoaQuantity int, tMsdsQuantity int, tReceiptQuantity int, tPurchaseBillQuantity int, tShowPriceWhenPrintReceipt int, tIsAppointLot int, tAppointLot char(20),
        tDeliveryNotes char(100), tOutBoundReason char(10), tRelationId char(50), tHandOverTime datetime, tOutBoundOrder char(20) = '', tTrayNumber int = 0;

        set     tId = o.id, tWarehouse = o.warehouse, tShelfBlock = o.shelfBlock, tProduct = o.product, tPack = o.pack,
                tConsigneeName = o.consigneeName, tConsigneeUnitName = o.consigneeUnitName, tConsigneeAddress = o.consigneeAddress, tConsigneeZipcode = o.consigneeZipcode,
                tConsigneeTelphone = o.consigneeTelphone, tConsigneeMobile = o.consigneeMobile, tExpressLogistics = o.expressLogistics, tShouldExpressLogistics = o.shouldExpressLogistics,
                tShouldNotExpressLogistics = o.shouldNotExpressLogistics, tNeedInsuredWhenDelivery = o.needInsuredWhenDelivery, tUnitPrice = o.unitPrice, tCurrency = o.currency,
                tIsNeedDelivery = o.isNeedDelivery, tDeliveryData = o.deliveryData, tCoaQuantity = o.coaQuantity, tMsdsQuantity = o.msdsQuantity, tReceiptQuantity = o.receiptQuantity, 
                tPurchaseBillQuantity = o.purchaseBillQuantity, tShowPriceWhenPrintReceipt = o.showPriceWhenPrintReceipt, tIsAppointLot = o.isAppointLot, tAppointLot = o.appointLot,
                tDeliveryNotes = o.deliveryNotes, tOutBoundReason = o.outBoundReason, tRelationId = o.relationId, tHandOverTime = o.handOverTime
        from    OutBoundHandoverTask as o
        where   o.relationId = saleOrderItemID and o.shelfBlock = oistockHJHID and o.quantity = quantity;

        PENDING OutBoundReadyCutTask + ( warehouse: tWarehouse, shelfBlock: tShelfBlock, product: tProduct, pack: tPack, quantity: quantity,
                consigneeName: tConsigneeName, consigneeUnitName: tConsigneeUnitName, consigneeAddress: tConsigneeAddress, consigneeZipcode: tConsigneeZipcode, 
                consigneeTelphone: tConsigneeTelphone, consigneeMobile: tConsigneeMobile, expressLogistics: tExpressLogistics, shouldExpressLogistics: tShouldExpressLogistics, 
                shouldNotExpressLogistics: tShouldNotExpressLogistics, needInsuredWhenDelivery: tNeedInsuredWhenDelivery, unitPrice: tUnitPrice, currency: tCurrency,
                isNeedDelivery: tIsNeedDelivery, deliveryData: tDeliveryData, coaQuantity: tCoaQuantity, msdsQuantity: tMsdsQuantity, receiptQuantity: tReceiptQuantity,
                purchaseBillQuantity: tPurchaseBillQuantity, showPriceWhenPrintReceipt: tShowPriceWhenPrintReceipt, isAppointLot: tIsAppointLot, appointLot: tAppointLot, 
                deliveryNotes: tDeliveryNotes, outBoundReason: tOutBoundReason, relationId: tRelationId, outBoundOrder: tOutBoundOrder, trayNumber: tTrayNumber, 
                handOverTime: tHandOverTime, outBoundTime: createTime
                ) to cId;

        delete t from OutBoundHandoverTask as t where t.id = tId;
    };
    */