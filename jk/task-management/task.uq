
--任务
TUID Task (
    id,
    main description char(100),
    main customer ID MyCustomer,
    main type ID TaskType,
    main biz ID BizType,

    sourceID bigint,
    sourceType char(10),
    sourceNo char(50),

    main priorty int not null,
    main deadline date, -- 要求完成时间
    main createTime date not null,
);

--任务类型
TUID TaskType (
    id,
    main name char(20),
    main description char(50),
    unique(name)
);

--任务类型
TUID JkTaskType (
    id,
    no bigint,
    main name char(20),
    main TimeLimit bigint,
    unique(name)
);

--任务类型
TUID JkTask (
    id,
    main description char(100),
    main customer ID Customer,
    main jktype ID JkTaskType,
    main type ID TaskType,
    main biz ID BizType,
    main employee id employee,
    sourceID bigint,
    sourceType char(10),
    sourceNo char(50),
    no bigint,
    main priorty int not null,
    main deadline date null, -- 要求完成时间
    main createTime date null,
    main completeTime datetime null,
    isValid smallint default 1,
);

--业务类型
TUID BizType (
    id,
    main name char(20),
    main description char(50),
    unique(name)
);

--完结内容备选项
TUID Field (
    id,
    main name char(100),
    main json text,    --备选项
    unique(name),
);

--任务状态
TUID TaskStatus (
    id,
    main name char(20),
    unique(name),
);

--任务状态
TUID Project (
    id,
    main name char(200),
);

--客户
TUID MyCustomer (
    id,
    user ID [$user],
    main unit ID MyCustomerUnit,
    no bigint,
    main name char(50) not null,
    main firstName char(50),
    main lastName char(50),
    main address ID Address,
    main addressString char(400),
    main telephone char(20),
    main gender char(5),
    main birthDay date,
    main email char(30),
    main wechat char(20),
    main teacher char(20),
    main potential smallint,
    research smallint,
    salutation char(10),
    createTime datetime,
    ARR Contact (
        owner,
        id,
        type char(8) not null, -- tel,mobile,email,fax,post,address,wechat,qq etc.
        content char(50) not null,
        order smallint,
    ),
    isValid smallint default 1,
    search (name, firstName, lastName),
    unique(no),
);
 
--客户单位
TUID MyCustomerUnit (
    id,
    user ID [$user],
    no bigint,
    main name char(50) not null,
    createTime datetime,
    ARR Contact (
        owner,
        id,
        type char(8) not null, -- tel,mobile,email,fax,post,address,wechat,qq etc.
        content char(50) not null,
        order smallint,
    ),
    isValid smallint default 1,
    search (name),
    unique(no),
);


--消息
TUID Message (
    id,
    date date,
    user ID [$user],
    peer ID [$user],
    main note text,
);

--优惠券
OPEN TUID Coupon (
    id,
    code char(8),
    user ID [$user],
    customer ID Customer,
    validitydate date,    
    discount dec(12, 2),     --折扣
    preferential dec(12, 2), --优惠额度
    createTime datetime,
    isValid  smallint default 1,
);

--业务类型关系
MAP TaskBiz (
    key type ID TaskType,
    key biz ID BizType,
);


--业务类型关系
MAP TaskBizJKTaskType (
    key type ID TaskType,
    key biz ID BizType,
    key jktype ID JkTaskType
);


--业务类型和完结内容关系
MAP BizField (
    key task ID Task,
    key field ID Field
);


--级别 邀请码
MAP Position (
    key user ID [$user],
    post tinyint,               -- -1：被拒绝，0：待批准，1：销售员，2：轻代理，3: 渠道经理, 90:Admin
    code bigint,
);


--层级关系树
MAP Relation (
    key parent ID [$user],
    key children ID [$user],
);
 

--优惠券订单
MAP CouponOrderMap (
    key coupon ID Coupon,
    key order ID,
);

--我的客户和系统客户关联关系
MAP CustomerMyCustomerMap (
    key sales ID [$user],
    key mycustomer ID MyCustomer,
    customer ID Customer,
    webuser ID [$user],
);

--平台用户和内部员工关系
MAP WebUserEmployeeMap (
    key webuser ID [$user],
    key employee ID employee,
);


--当前轻代理
BOOK CustomerNowSalesBOOK (
    key customer ID Customer,
    sales ID [$user],
    validity datetime
);


--任务状态记录
BOOK TaskBook (
    key task ID Task,
    status ID TaskStatus,
    principal ID Employee,
    remindDate  date,
);

--任务完结记录
BOOK TaskFieldBook (
    key task ID Task,
    key field ID Field,
    value bigint,
);

--任务完结产品
BOOK TaskProductBook (
    key task ID Task,
    key product ID ProductX,
    note text,
);

--任务完结产品包装
BOOK TaskProductPackBook (
    key task ID Task,
    key product ID ProductX,
    key pack OF product.PackX,
    note text,
);

--任务完结项目
BOOK TaskProjectBook (
    key task ID Task,
    key project ID Project,
    note text,
);


--粉丝信息自定义
BOOK PeerAssignedBook(
    key user ID [$user],
    key peer ID [$user],
    Assigned char(100),
);


--业绩计算规则
BOOK AchievementRuleBook(
    key Type int, --1：客户，2：直属销售，3： 二级销售
    key MinAmount dec(12, 2),
    key MaxAmount dec(12, 2),
    value dec(12, 2) ,
);

--销售业绩
BOOK SalesAchievementBook(
    key user ID [$user],
   
    Level int not null default 1, --级别 ： 1：铜牌； 2:金牌；3:钻石；（级别 ：0：普通； 1：铜牌； 2:金牌；3:钻石；）

    oneSaleVolume dec(12, 2) not null default 0 , --客户销量
    twoSaleVolume dec(12, 2) not null default 0 , --直属团队销量
    threeSaleVolume dec(12, 2) not null default 0 , --二级团队销量

    oneAchievement dec(12, 2) not null default 0 , --客户销量提成
    twoAchievement dec(12, 2) not null default 0 , --二级团队销量提成
    threeAchievement dec(12, 2) not null default 0 , --二级团队销量提成
);


--业绩历史记录
History AchievementHistory (
    date,
    sales ID [$user],    --销售
    order ID,
    price dec(12, 2) not null,
    agentprices dec(12, 2) not null,
    Types int,
    mycustomer ID MyCustomer,
    Amount dec(12, 2) not null,
    status smallint default 1,
);



--订单历史记录
BOOK CustomerOrderBook (
    key sales ID [$user],    --销售
    key mycustomer ID MyCustomer,
    key order ID,
    key product ID ProductX not null,
    key pack OF product.PackX not null,
    quantity int not null,
    price dec(12, 2) not null,
    agentprices dec(12, 2) not null,
    isUsed smallint default 1,
);



--消息
BOOK MessageBook (
    key user ID [$user],
    count bigint,
);

--任务流转记录
History TaskHistory (
    date,
    task ID Task,
    status ID TaskStatus,
    principal ID Employee,
    resultType char(5),
    result char(1000),
);


/** 完结任务*/
ACTION CompletionTask(
    taskid ID Task,
    resultType char(5),
    result char(1000),
    ARR fields (
        fieldName char(100),
        value bigint
    )
) {
    history TaskHistory 
    set task=taskid, status=4, principal=$user, resultType=resultType, result=result;

    delete from TaskBook where task = taskid;

    foreach fields {
        var fieldId ID;
        tuid Field into fieldId unique(fieldName);
        book TaskFieldBook at(taskId, fieldId) set value=value;
    }
};

/** 完结任务--客户资料*/
ACTION CompletionCustomerInfoTask(
    taskid ID Task,
    resultType char(5),
    result char(1000),
    ARR fields (
        fieldName char(100),
        value text
    )
) {
    var customer ID MyCustomer;
    set customer = customer from Task where id = taskid;

    foreach fields {
        if(fieldName='name'){
            TUID MyCustomer id (customer) set name =value;
        }else if(fieldName='telephone'){
            TUID MyCustomer id (customer) set telephone =value;
        }else if(fieldName='email'){
            TUID MyCustomer id (customer) set email =value;
        }else if(fieldName='wechat'){
            TUID MyCustomer id (customer) set wechat =value;
        }else if(fieldName='teacher'){
            TUID MyCustomer id (customer) set teacher =value;
        }else if(fieldName='potential'){
            TUID MyCustomer id (customer) set potential =value;
        }else if(fieldName='research'){
            TUID MyCustomer id (customer) set research =value;
        }
    }

    history TaskHistory 
    set task=taskid, status=4, principal=$user, resultType=resultType, result=result;
    delete from TaskBook where task = taskid;
};


/** 拒绝任务*/
ACTION InvalidTask(
    taskid ID Task,
    resultType char(5),
    result char(1000)
){

    history TaskHistory 
    set  task=taskid, status = 3, principal = $user, resultType = resultType, result= result;

    delete from TaskBook where task = taskid;
};

/** 延期任务*/
ACTION ExtensionTask(
    taskid ID Task,
    remindDate date,
    result char(1000)
){
    
    history TaskHistory 
    set task=taskid, status = 2, principal = $user, resultType = 'exten', result= result;
    book TaskBook at ( taskid ) set remindDate = remindDate;
};

/** 添加任务*/
ACTION AddTask(
    description char(100),
    customer ID MyCustomer,
    type ID TaskType,
    biz ID BizType,
    sourceID bigint,
    sourceType char(10),
    sourceNo char(50),
    priorty int not null,
    deadline date not null
)
RETURNS ret (
    id ID
) {
    var taskId ID;
    TUID task into taskId set
        description=description, customer=customer, type=type, biz=biz,
        sourceID=sourceID, sourceType=sourceType, sourceNo=sourceNo, priorty=priorty, deadline=deadline, createTime=$date;

    BOOK TaskBook at (taskId) set status=1, principal=$user;
    into ret select taskId as id;
};

/** 导入任务*/
ACTION ImportTask(
    task ID JkTask,
    customername char(50),
    organization ID Organization,
    organizationName char(100)
)
RETURNS ret (
    id ID,
    customer ID Customer,
    description char(100)
) {
    var id bigint, description char(100), customer ID Customer, type ID TaskType, 
            biz ID BizType, employee ID employee, priorty int, deadline date;

    set     id=a.id, description=a.description, customer=a.customer, type=a.type, 
            biz=a.biz, employee=a.employee, priorty=a.priorty, deadline=a.deadline
    from    JkTask as a
    where   a.id=task;

    var mycustomerid ID;
    set mycustomerid=mycustomer from CustomerMyCustomerMap where Customer=customer;

    if ( mycustomerid is null ){
        --判断是否有单位，没有单位新建单位
        var mycustomerUnitid ID;
        set mycustomerUnitid=id from MyCustomerUnit where no=organization;
        if( mycustomerUnitid is null ){
            TUID MyCustomerUnit into mycustomerUnitid unique(organization) set
                    name=organizationName, createTime=now(), isValid=1, user=$user; 
        }
 
        var name char(50), firstName char(50), lastName char(50), xyz char(5), gender char(5), salutation char(10), birthDay date;
        set     name=a.name, firstName=a.firstName, lastName=a.lastName, xyz=a.xyz, gender=a.gender, salutation=a.salutation, birthDay=a.birthDay
        from    Customer as a
        where   a.id = customer;

        if(name is null){
            set name = customername;
        }
        
        TUID MyCustomer into mycustomerid unique(customer) set
            name=name, firstName=firstName, lastName=lastName, gender=gender, user=$user, unit=mycustomerUnitid,
            salutation=salutation, birthDay=birthDay, isValid=1, createTime=now();
        
         BOOK CustomerMyCustomerMap at ( $user, mycustomerid ) set customer=customer ; 
    }

    var taskId ID;
    TUID task into taskId set
        description=description, customer=mycustomerid, type=type, biz=biz,
        priorty=priorty, deadline=deadline, createTime=$date;

    BOOK TaskBook at (taskId) set status=1, principal=$user;
    into ret select taskId as id, customer,description;

    TUID JkTask into id id (id) set isValid = 0;
};

/** 添加任务产品*/
ACTION CreateTaskProduct(
    taskid ID Task,
    productid ID ProductX,
    note text
){
    BOOK TaskProductBook at (taskid,productid) set note=note;
};

/** 添加任务产品包装*/
ACTION CreateTaskProductPack(
    task ID Task,
    product ID ProductX ,
    pack OF product.PackX,
    note text
){
    BOOK TaskProductPackBook at (task,product,pack) set note=note;
};


/** 添加任务项目*/
ACTION CreateTaskProject(
    taskid ID Task,
    note text
){
    var projectId ID;
    TUID Project into projectId set name=note;
    BOOK TaskProjectBook at (taskid, projectId);
};

/** 添加验证码*/
ACTION CreatePosition (
    invitacode bigint
)
RETURNS ret (
    succeed tinyint,
    code bigint
)
{
    var parent ID [$user];
    set parent =( select user from Position where code=invitacode );
    if parent is null {
        into ret select -1 as succeed, 0 as code; 
    }
    else{
        var code bigint;
        set code = (select user from Position where user = $user);
        if code is null {
            set code = rand() * 100000000;
            BOOK Position at ($user) set post=0, code=code;
            into ret select 1 as succeed, code as code;

            BOOK Relation at ( parent, $user );
        }
        else{
            into ret select 0 as succeed, code as code;
        }
    }
};

/** 添加客户*/
ACTION CreateMyCustomer(
    unit ID MyCustomerUnit,
    no bigint,
    name char(50) not null,
    firstName char(50),
    lastName char(50),
    gender char(5),
    salutation char(10),
    birthDay date,
    telephone char(50)
)returns ret (
    code bigint
){
    var myCustomerId ID,customerId ID, counts int;
    TUID MyCustomer into myCustomerId unique(no) set
        name=name, firstName=firstName, lastName=lastName, gender=gender, unit = unit, user = $user,
        salutation=salutation, birthDay=birthDay, telephone=telephone,isValid=1,createTime=now();

    set customerId=b.id 
    from    Customer.Contact as a 
            join Customer as b on a.owner=b.id
    where   a.content=telephone;

    set     counts = count(1) 
    from    CustomerNowSalesBOOK 
    where   customer=customerId and ( sales is null or sales <> $user );
    set counts = ifnull(counts,0);

    if(counts > 0){
       into ret select 1 as code;
    }else{
       into ret select 0 as code;
    }
};

/** 添加客户单位*/
ACTION CreateMyCustomerUnit(
    no bigint,
    name char(50) not null
)returns ret (
    code bigint
){
    var rename char(50) , unitId bigint;
    set rename = a.name from MyCustomerUnit as a where a.user=$user and a.name=name limit 1;
    
    if(rename is null ){
        TUID MyCustomerUnit into unitId unique(no) set
            name=name, createTime=now(), isValid=1, user=$user;
        
    }else{
         set unitId = 0;
    };
    into ret select unitId as code;
    
};


/** 修改粉丝的自定义名称*/
ACTION SavePeerAssigned(
    peer ID [$user],
    Assigned char(100)
){
    BOOK PeerAssignedBook at ( $user, peer ) set Assigned=Assigned;
};


/** 清空消息*/
ACTION UpdateNowMessage(){
    BOOK MessageBook at ( $user) set count=0;
};

/** 添加优惠码*/
ACTION CreateCoupon(
    validitydate date,
    discount dec(12, 2), 
    preferential dec(12, 2),
    mycustomer ID MyCustomer
)returns ret (
    code char(8)
){

    var code bigint, head bigint,  customer ID Customer;
    set code = ( RAND() * 99999999) + 10000000;
    
    if( not mycustomer is null ){
        set customer=customer from CustomerMyCustomerMap where mycustomer=mycustomer;
    }
    
    var couponId ID;
    TUID Coupon into couponId set user= $user, code=code, validitydate=validitydate, customer=customer,
                discount=discount, preferential=preferential, createTime=now(), isValid=1;
    into ret select code;
     
};

/** 验证优惠码是否可用*/
ACTION IsCanUseCoupon ( 
    code char(20), 
    customer ID Customer
)
returns ret (
    result  bigint,
    id      bigint, 
    code   char(20), 
    user   ID [$user],
    customer ID Customer,
    discount dec(12,2),  
    preferential dec(12,2), 
    validitydate datetime, 
    isValid smallint
) 
{
    var result      bigint, 
    id              bigint, 
    validitydate    datetime, 
    isValid         smallint, 
    customer2 ID    Customer, 
    discount        dec(12,2),  
    preferential    dec(12,2),  
    order2          char(50), 
    sales ID        [$user], 
    nowsales   ID   [$user],
    coupon char(8) ;

    set     id = c.id,
            sales=c.user, --轻代理
            isValid=c.isValid, --是否有效
            validitydate=c.validitydate, --有效期
            customer2=c.customer, --MYCID
            discount = c.discount,
            preferential=  c.preferential,
            coupon = code
    from    Coupon as c 
    where   c.code = code;
 
    set order2 = ( select co.order from CouponOrderMap as co where co.coupon = id);

    set nowsales = ( select c.sales from CustomerNowSalesBOOK as c where c.customer = customer limit 1 ); --当前轻代理
    
    if ( coupon is null ) {
        set result = 0;  --不存在
    } else if ( isValid <> 1 or validitydate < now() ) {
        set result = 2;  --无效的优惠码
    } else if ( customer <> customer2) {
        set result = 3;  --不是指定的客户
    } else if (not order2 is null) {
        set result = 4;  --已经被使用
    } else if ( not nowsales is null and nowsales <> sales )  {
        set result = 5;  --不是当前的轻代理( 有当前轻代理 和 优惠码的轻代理 不相同 )
    } else {
        set result = 1;  --正常
        /**
        --取消BUS的发送，如果购物车需要查询订单的使用记录通过VT的方式
        bus couponBus.coupon set id=id, code=code, user=sales, customer=customer2, discount=discount, 
            preferential=preferential, validitydate=validitydate, isValid=isValid; 
        bus couponBus.coupon send;
        **/
    };
    into ret select result, id, code, sales as user, customer2 as customer, discount, preferential, validitydate, isValid;
};


ACTION UpateCustomerMyCustomerMap(
    mycustomer ID MyCustomer,
    customer ID Customer
){

     BOOK CustomerMyCustomerMap at ($user, mycustomer) set customer=customer; 
};


/**计算绩效**/
ACTION ComputeAchievement(
)
returns ret (
    oneSaleVolume_1 dec(12, 2),
    oneMaxVolume dec(12, 2),
    price   dec(12, 2),
    agentprices  dec(12, 2),
    quantity  dec(12, 2),
    oneRate_1  dec(12, 2),
    oneExcess  dec(12, 2),
    oneNotExcess  dec(12, 2),
    oneRate dec(12, 2),
    result dec(12, 2)
) {
    foreach ( var sales bigint, mycustomer bigint, quantity bigint, order bigint, price dec(12, 2),agentprices dec(12, 2) of
            select  sales,mycustomer,quantity,order,price,agentprices
            from    CustomerOrderBook
            where   sales=$user and isUsed=1
    ) {

        var sumprice  dec(12, 2);

        set sumprice = price * quantity;

        --step.1.计算一级绩效
        --step.1.1.获取基础变量
        var oneSaleVolume dec(12, 2), oneMaxVolume dec(12, 2), oneRate dec(12, 2), oneSaleVolume_1 dec(12, 2);
        --获取总销量
        set oneSaleVolume=oneSaleVolume from SalesAchievementBook where user=$user;
        set oneSaleVolume = ifnull(oneSaleVolume,0);
        --获取总销量（加上订单金额）
        set oneSaleVolume_1 =  oneSaleVolume + sumprice;
        --获取提成比例和 改比例的最大销量
        set oneRate = value, oneMaxVolume=MaxAmount from AchievementRuleBook where MinAmount <= oneSaleVolume and oneSaleVolume < MaxAmount and Type=1;
     
        --step.1.2.计算绩效
        var  oneAchievement dec(12, 2);
        if( oneSaleVolume_1 <= oneMaxVolume ){
            set oneAchievement = ((price - agentprices) * quantity * oneRate);
            into ret select   oneSaleVolume_1, oneMaxVolume , price, agentprices, quantity, 0 as oneRate_1, 0 as oneExcess, 0 as oneNotExcess, oneRate , oneAchievement as result;
        }else{
            var oneRate_1 dec(12, 2) , --超出部分提成比例
                oneExcess dec(12, 2) , --超出部分
                oneNotExcess dec(12, 2);--未超出部分
            set oneExcess =oneSaleVolume_1 - oneMaxVolume;
            set oneNotExcess = sumprice - (oneSaleVolume_1 - oneMaxVolume);

            set oneRate_1 = value from AchievementRuleBook where MinAmount < oneSaleVolume_1 and MaxAmount >= oneSaleVolume_1 and Type=1;
            set oneAchievement = (((price - agentprices) * oneRate_1 * ( oneExcess / sumprice) ) + ((price - agentprices) * oneRate * ( oneNotExcess / sumprice) ) ) * quantity ;
        
            into ret select   oneSaleVolume_1, oneMaxVolume , price, agentprices, quantity, oneRate_1, oneExcess, oneNotExcess, oneRate , oneAchievement as result;
        }

        --step.1.3.记账
        --更新总销售额，A类绩效
        book SalesAchievementBook at($user) set oneSaleVolume+=sumprice, oneAchievement+=oneAchievement;
        --记录A类绩效历史
        history AchievementHistory set sales=sales, mycustomer=mycustomer, Amount=oneAchievement, Types=1, order=order, price=price,agentprices=agentprices ;
       
        --step.2.计算二级绩效
        var twosale ID [$user], threesale ID [$user];
        set twosale=parent from  Relation where children=$user;

        if( not twosale is null ){
 
            --step.2.1.获取基础变量
            var twoSaleVolume dec(12, 2) ,twoMaxVolume dec(12, 2), twoRate dec(12, 2), twoSaleVolume_1 dec(12, 2);
            --获取总销量
            set twoSaleVolume=a.twoSaleVolume from SalesAchievementBook as a where a.user=twosale;
            set twoSaleVolume = ifnull(twoSaleVolume,0);
            --获取总销量（加上订单金额）
            set twoSaleVolume_1 =  twoSaleVolume+sumprice;
            --获取提成比例和 改比例的最大销量
            set twoRate = value, twoMaxVolume=MaxAmount from AchievementRuleBook where MinAmount <= twoSaleVolume and twoSaleVolume < MaxAmount and Type=2;
            
            --step.2.2.计算绩效
            var  twoAchievement dec(12, 2);
            if( twoSaleVolume_1 <= twoMaxVolume ){
                set twoAchievement =  ( oneAchievement * twoRate );
                into ret select  twoSaleVolume_1 as oneSaleVolume_1, twoMaxVolume as oneMaxVolume , price, agentprices, quantity, 0 as oneRate_1,  0 as oneExcess,  0 as oneNotExcess, twoRate as oneRate , twoAchievement as result;
            }else{
                var twoRate_1 dec(12, 2) , --超出部分提成比例
                    twoExcess dec(12, 2) , --超出部分
                    twoNotExcess dec(12, 2);--未超出部分
                set twoExcess =twoSaleVolume_1 - twoMaxVolume;
                set twoNotExcess = sumprice-(twoSaleVolume_1 - twoMaxVolume);

                set twoRate_1 = value from AchievementRuleBook where MinAmount < twoSaleVolume_1 and MaxAmount >= twoSaleVolume_1 and Type=2;
                set twoAchievement = ((oneAchievement * twoRate_1 * ( twoExcess / sumprice) ) + (oneAchievement * twoRate * ( twoNotExcess / sumprice) ) ) * quantity ;

                into ret select  twoSaleVolume_1 as oneSaleVolume_1, twoMaxVolume as oneMaxVolume, price, agentprices, quantity, twoRate_1 as oneRate_1,  twoExcess as oneExcess,  twoNotExcess as oneNotExcess, twoRate as oneRate , twoAchievement as result;
            }

            --更新上级的类型
            var twoLevelA int = 0, twoLevelB int = 0, twoLevel int = 1;
            set     twoLevelA = sum( case when b.oneSaleVolume > 0 then 1 else 0 end ), twoLevelB = sum( case when b.Level > 1 then 1 ELSE 0 END  )
            from    Relation as a
                    join SalesAchievementBook as b on a.children = b.user
            where   a.parent=twosale;

            set     twoLevel =  
                    case 
                        when  twoLevelB >= 1 then 3 
                    ELSE 	case 
                                when  twoLevelA >= 1 then 2
                            ELSE 1
                            END 
                    END 
            from    SalesAchievementBook
            where   user=twosale;
            book SalesAchievementBook at(twosale) set level = twoLevel;

            if( twoLevel >= 2 ){
                --step.2.3.记账
                --更新总销售额
                book SalesAchievementBook at(twosale) set twoSaleVolume+=sumprice, twoAchievement+=twoAchievement;
                --更新B类历史
                history AchievementHistory set sales=twosale, mycustomer=mycustomer, Amount=twoAchievement, Types=2, order=order, price=price,agentprices=agentprices ;
            }

            --step.3.计算三级绩效
            set threesale=parent from  Relation where children=twosale;
            if( not threesale is null ){
                --step.3.1.获取基础变量
                var threeSaleVolume dec(12, 2), threeMaxVolume dec(12, 2), threeRate dec(12, 2), threeSaleVolume_1 dec(12, 2); 
                --获取总销量
                set threeSaleVolume=threeSaleVolume from SalesAchievementBook where user=threesale;
                set threeSaleVolume = ifnull(threeSaleVolume,0);
                --获取总销量（加上订单金额）
                set threeSaleVolume_1 = threeSaleVolume+sumprice;
                --获取提成比例和 改比例的最大销量
                set threeRate = value, threeMaxVolume=MaxAmount from AchievementRuleBook where MinAmount <= threeSaleVolume and threeSaleVolume < MaxAmount and Type=3;

                --step.3.2.计算绩效
                var threeAchievement dec(12, 2);
                if( threeSaleVolume_1 <= threeMaxVolume ){
                    set threeAchievement =  ( twoAchievement * threeRate );
                    into ret select  threeSaleVolume_1 as oneSaleVolume_1, threeMaxVolume as oneMaxVolume , price, agentprices,quantity, 0 as oneRate_1,  0 as oneExcess,  0 as oneNotExcess, threeRate as oneRate , threeAchievement as result;
                }else{
                    var threeRate_1 dec(12, 2) , --超出部分提成比例
                        threeExcess dec(12, 2) , --超出部分
                        threeNotExcess dec(12, 2);--未超出部分
                    set threeExcess =threeSaleVolume_1 - threeMaxVolume;
                    set threeNotExcess = sumprice - ( threeSaleVolume_1 - threeMaxVolume );

                    set threeRate_1 = value from AchievementRuleBook where MinAmount < threeSaleVolume_1 and MaxAmount >= threeSaleVolume_1 and Type=3;
                    set threeAchievement = ( (twoAchievement * threeRate_1 * ( threeExcess / sumprice ) ) + ( twoAchievement * threeRate * ( threeNotExcess / sumprice) ) ) * quantity ;
                    
                    into ret select  threeSaleVolume_1 as oneSaleVolume_1, threeMaxVolume as oneMaxVolume , price, agentprices,quantity, threeRate_1 as oneRate_1,  threeExcess as oneExcess,  threeNotExcess as oneNotExcess, threeRate as oneRate , threeAchievement as result;
                }

                var threeLevelA int = 0, threeLevelB int = 0, threeLevel int = 1;
                set     threeLevelA = sum( case when b.oneSaleVolume > 0 then 1 else 0 end ), threeLevelB = sum( case when b.Level > 1 then 1 ELSE 0 END  )
                from    Relation as a
                        join SalesAchievementBook as b on a.children = b.user
                where   a.parent=threesale;

                set     threeLevel =  
                        case 
                            when  threeLevelB >= 1 then 3 
                        ELSE 	case 
                                    when  threeLevelA >= 1 then 2
                                ELSE 1
                                END 
                        END 
                from    SalesAchievementBook
                where   user=twosale;
                book SalesAchievementBook at(threesale) set level = threeLevel;
                
                if( twoLevel >= 2 and threeLevel >= 3 ){
                    --step.3.3.记账
                    --更新总销售额
                    book SalesAchievementBook at(threesale) set threeSaleVolume+=sumprice, threeAchievement+=threeAchievement;
                    --更新C类历史
                    history AchievementHistory
                        set sales=threesale, mycustomer=mycustomer, Amount=threeAchievement,Types=3, order=order, price=price,agentprices=agentprices;
                }
            }
        }  
     }

     delete from CustomerOrderBook where sales=$user;
};
